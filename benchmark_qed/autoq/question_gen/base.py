"""
Base classes for generating questions for evaluations of a given dataset consisting of multiple text units.
"""

from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import Any

from benchmark_qed.autoq.data_model.question import Question
from benchmark_qed.autoq.sampler.question_sampler import QuestionSampler
from benchmark_qed.llm.type.base import ChatModel


@dataclass
class QuestionGenResult:
    selected_questions: list[Question]
    """Store the final set of generated questions"""

    candidate_questions: list[Question]
    """Store the candidate questions generated by the LLM. These candidate questions are then ranked and selected by the question sampler."""


class BaseQuestionGen(ABC):
    def __init__(
        self,
        llm: ChatModel,
        llm_params: dict[str, Any] = {},
        question_sampler: QuestionSampler | None = None,
    ):
        self.llm = llm
        self.llm_params = llm_params
        self.question_sampler = question_sampler

    @abstractmethod
    async def agenerate(self, *args: Any, **kwargs: Any) -> QuestionGenResult:
        """Generate candidate synthetic questions from the given text clusters."""

    def select(
        self, candidate_questions: list[Question], top_k: int = 50, **kwargs: Any
    ) -> list[Question]:
        """Select a subset of top-ranked questions from the generated candidate questions."""
        if len(candidate_questions) <= top_k:
            return candidate_questions

        if self.question_sampler:
            return self.question_sampler.sample(
                questions=candidate_questions, sample_size=top_k, **kwargs
            )
        return candidate_questions[:top_k]
